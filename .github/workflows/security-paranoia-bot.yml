name: Security Paranoia Bot - Dynamic Analysis

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number to analyze (optional)'
        required: false
        type: string
      enable_deep_scan:
        description: 'Enable comprehensive deep scanning'
        required: false
        type: boolean
        default: true
      enable_ai_analysis:
        description: 'Enable AI-enhanced analysis'
        required: false
        type: boolean
        default: true
      enable_ml_features:
        description: 'Enable Phase 3 ML features'
        required: false
        type: boolean
        default: true
      bot_api_url:
        description: 'Security Paranoia Bot API URL (defaults to public instance)'
        required: false
        type: string
        default: 'https://security-paranoia-bot.storehubnet.com'
    secrets:
      GEMINI_API_KEY:
        required: false
      OPENAI_API_KEY:
        required: false
      PHASE3_API_URL:
        required: false
      PHASE3_API_KEY:
        required: false

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      issues: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      
      - name: Dynamic Security Analysis
        id: security-scan
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENABLE_AI_ANALYSIS: ${{ inputs.enable_ai_analysis }}
          ENABLE_DEEP_SCAN: ${{ inputs.enable_deep_scan }}
          ENABLE_ML_FEATURES: ${{ inputs.enable_ml_features }}
          PHASE3_API_URL: ${{ secrets.PHASE3_API_URL }}
          PHASE3_API_KEY: ${{ secrets.PHASE3_API_KEY }}
          PR_NUMBER: ${{ inputs.pr_number || github.event.pull_request.number }}
          BOT_API_URL: ${{ inputs.bot_api_url }}
        run: |
          echo "üîç Starting Security Paranoia Bot Dynamic Analysis..."
          echo "Repository: ${{ github.repository }}"
          echo "PR Number: ${PR_NUMBER}"
          echo "Deep Scan: ${ENABLE_DEEP_SCAN}"
          echo "AI Analysis: ${ENABLE_AI_ANALYSIS}"
          echo "ML Features: ${ENABLE_ML_FEATURES}"
          echo "Bot API: ${BOT_API_URL}"
          echo ""
          
          # Extract owner and repo from current repository
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          
          echo "üì° Calling Security Paranoia Bot API..."
          echo "Owner: $OWNER"
          echo "Repo: $REPO"
          
          # Call Security Paranoia Bot API to analyze the PR
          ANALYSIS_RESPONSE=$(curl -s -X POST "${BOT_API_URL}/api/analyze-pr" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -d "{
              \"owner\": \"$OWNER\",
              \"repo\": \"$REPO\",
              \"prNumber\": ${PR_NUMBER},
              \"enableAI\": ${ENABLE_AI_ANALYSIS},
              \"enableML\": ${ENABLE_ML_FEATURES},
              \"enableDeepScan\": ${ENABLE_DEEP_SCAN}
            }" || echo '{"error": "API call failed", "message": "Could not connect to Security Paranoia Bot API"}')
          
          echo "$ANALYSIS_RESPONSE" > analysis-response.json
          
          # Check if we got a valid response
          if echo "$ANALYSIS_RESPONSE" | jq -e '.vulnerabilitiesByFile' > /dev/null 2>&1; then
            echo "‚úÖ Analysis completed successfully"
            
            # Extract vulnerabilities
            echo "$ANALYSIS_RESPONSE" | jq '.vulnerabilitiesByFile' > vulnerability-details.json
            
            # Count vulnerabilities
            TOTAL_VULNERABILITIES=$(echo "$ANALYSIS_RESPONSE" | jq '.totalVulnerabilities // 0')
            CRITICAL_COUNT=$(echo "$ANALYSIS_RESPONSE" | jq '.criticalCount // 0')
            HIGH_COUNT=$(echo "$ANALYSIS_RESPONSE" | jq '.highCount // 0')
            MEDIUM_COUNT=$(echo "$ANALYSIS_RESPONSE" | jq '.mediumCount // 0')
            LOW_COUNT=$(echo "$ANALYSIS_RESPONSE" | jq '.lowCount // 0')
            
            echo ""
            echo "üìä VULNERABILITY SUMMARY"
            echo "======================="
            echo "Total: $TOTAL_VULNERABILITIES"
            echo "üî¥ Critical: $CRITICAL_COUNT"
            echo "üü† High: $HIGH_COUNT"
            echo "üü° Medium: $MEDIUM_COUNT"
            echo "üü¢ Low: $LOW_COUNT"
            echo ""
            
            # Extract auto-fixes if available
            if echo "$ANALYSIS_RESPONSE" | jq -e '.autoFixes' > /dev/null 2>&1; then
              echo "$ANALYSIS_RESPONSE" | jq '.autoFixes' > auto-fixes.json
              AUTO_FIX_COUNT=$(echo "$ANALYSIS_RESPONSE" | jq '.autoFixes | length')
              echo "üîß Auto-fixes available: $AUTO_FIX_COUNT"
            fi
            
          else
            echo "‚ö†Ô∏è Analysis failed or returned no results"
            ERROR_MSG=$(echo "$ANALYSIS_RESPONSE" | jq -r '.message // .error // "Unknown error"')
            echo "Error: $ERROR_MSG"
            
            # Create empty reports for downstream steps
            echo '{}' > vulnerability-details.json
            echo '[]' > auto-fixes.json
            
            # Set default values
            TOTAL_VULNERABILITIES=0
            CRITICAL_COUNT=0
            HIGH_COUNT=0
            MEDIUM_COUNT=0
            LOW_COUNT=0
          fi
          
          # Generate security report
          cat > security-report.json << EOF
          {
            "summary": {
              "totalVulnerabilities": ${TOTAL_VULNERABILITIES},
              "critical": ${CRITICAL_COUNT},
              "high": ${HIGH_COUNT},
              "medium": ${MEDIUM_COUNT},
              "low": ${LOW_COUNT},
              "analysisTime": "$(date -Iseconds)",
              "aiAnalysisEnabled": ${ENABLE_AI_ANALYSIS},
              "mlFeaturesEnabled": ${ENABLE_ML_FEATURES},
              "deepScanEnabled": ${ENABLE_DEEP_SCAN}
            }
          }
          EOF
          
          echo "üíæ Security report saved"
          
          # Determine build status
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "‚ùå BUILD FAILED: $CRITICAL_COUNT critical vulnerabilities detected"
            echo "build_status=failure" >> $GITHUB_OUTPUT
            echo "FINAL_EXIT_CODE=1" >> $GITHUB_ENV
          else
            echo "‚úÖ BUILD PASSED: No critical vulnerabilities"
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "FINAL_EXIT_CODE=0" >> $GITHUB_ENV
          fi
      
      - name: Phase 3 ML Analysis
        if: always() && inputs.enable_ml_features && (github.event_name == 'pull_request' || inputs.pr_number)
        continue-on-error: true
        env:
          PHASE3_API_URL: ${{ secrets.PHASE3_API_URL }}
          PHASE3_API_KEY: ${{ secrets.PHASE3_API_KEY }}
        run: |
          echo "ü§ñ Running Phase 3 ML Analysis..."
          
          # Check if Phase 3 API is configured
          if [[ -z "$PHASE3_API_URL" ]] || [[ -z "$PHASE3_API_KEY" ]]; then
            echo "‚ö†Ô∏è Phase 3 API not configured. Skipping ML analysis."
            echo '{"error": "Phase 3 API not configured"}' > ml-analysis-results.json
            exit 0
          fi
          
          # Get vulnerabilities from previous step
          if [[ ! -f vulnerability-details.json ]] || [[ "$(cat vulnerability-details.json)" == "{}" ]]; then
            echo "‚ö†Ô∏è No vulnerabilities to analyze"
            echo '{"error": "No vulnerabilities found"}' > ml-analysis-results.json
            exit 0
          fi
          
          VULNS_JSON=$(cat vulnerability-details.json | jq -c '.')
          
          # Call Phase 3 API
          ML_RESPONSE=$(curl -s -X POST "${PHASE3_API_URL}/api/analyze-pr" \
            -H "X-API-Key: ${PHASE3_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"vulnerabilities\": ${VULNS_JSON},
              \"repository\": \"${{ github.repository }}\",
              \"prNumber\": ${PR_NUMBER:-0}
            }" || echo '{"error": "ML API call failed"}')
          
          echo "$ML_RESPONSE" > ml-analysis-results.json
          
          # Check if ML analysis was successful
          if echo "$ML_RESPONSE" | jq -e '.suggestions' > /dev/null 2>&1; then
            echo "‚úÖ ML Analysis completed successfully"
            
            # Extract key insights
            ANOMALY_COUNT=$(echo "$ML_RESPONSE" | jq '.anomalies | length' || echo "0")
            HISTORICAL_MATCHES=$(echo "$ML_RESPONSE" | jq '.historicalContext | length' || echo "0")
            
            echo "üìä ML Insights:"
            echo "- Anomalies detected: $ANOMALY_COUNT"
            echo "- Historical similar incidents: $HISTORICAL_MATCHES"
            echo "- Risk assessment: $(echo "$ML_RESPONSE" | jq -r '.riskAssessment.level // "Not available"')"
          else
            echo "‚ö†Ô∏è ML Analysis returned no results or failed"
          fi
      
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: |
            analysis-response.json
            security-report.json
            vulnerability-details.json
            auto-fixes.json
            ml-analysis-results.json
          retention-days: 30
      
      - name: Post Summary Comment
        if: always() && (github.event_name == 'pull_request' || inputs.pr_number)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            // Read all reports
            let report, vulnerabilities, autoFixes, mlResults;
            try {
              report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              vulnerabilities = JSON.parse(fs.readFileSync('vulnerability-details.json', 'utf8'));
              if (fs.existsSync('auto-fixes.json')) {
                autoFixes = JSON.parse(fs.readFileSync('auto-fixes.json', 'utf8'));
              }
              if (fs.existsSync('ml-analysis-results.json')) {
                mlResults = JSON.parse(fs.readFileSync('ml-analysis-results.json', 'utf8'));
              }
            } catch (error) {
              console.error('Failed to read reports:', error);
              return;
            }
            
            const { summary } = report;
            
            // Create status emoji based on severity
            let statusEmoji = '‚úÖ';
            let statusText = 'PASSED';
            if (summary.critical > 0) {
              statusEmoji = '‚ùå';
              statusText = 'FAILED';
            } else if (summary.high > 10) {
              statusEmoji = '‚ö†Ô∏è';
              statusText = 'WARNING';
            }
            
            // Build ML insights section
            let mlInsights = '';
            if (mlResults && !mlResults.error && summary.mlFeaturesEnabled) {
              const anomalyCount = mlResults.anomalies?.length || 0;
              const historicalCount = mlResults.historicalContext?.length || 0;
              const riskLevel = mlResults.riskAssessment?.level || 'Unknown';
              
              mlInsights = `
            ### üß† **Phase 3 ML Analysis**
            
            ${anomalyCount > 0 ? `
            ‚ö†Ô∏è **Anomaly Alert**: ${anomalyCount} unusual security patterns detected that may indicate:
            - Zero-day vulnerabilities
            - Novel attack vectors  
            - Business logic flaws
            ` : '‚úÖ No anomalous patterns detected'}
            
            ${historicalCount > 0 ? `
            üìö **Historical Context**: Found ${historicalCount} similar incidents in organizational history
            - These provide valuable context for remediation
            - Learn from past security incidents
            ` : ''}
            
            ${riskLevel !== 'Unknown' ? `
            üìä **Risk Assessment**: ${riskLevel}
            ` : ''}`;
            }
            
            // Build auto-fix section
            let autoFixSection = '';
            if (autoFixes && Array.isArray(autoFixes) && autoFixes.length > 0) {
              autoFixSection = `
            ### üîß **Automated Fixes Available**
            
            The Security Paranoia Bot can automatically fix ${autoFixes.length} vulnerabilities:
            - Run with \`--auto-fix\` flag to apply fixes
            - Review proposed changes before merging
            `;
            }
            
            const comment = `## ${statusEmoji} **Security Paranoia Bot Analysis Report**
            
            **Status**: ${statusText} | **Analysis Time**: ${new Date().toISOString()}
            
            ### üìä **Vulnerability Summary**
            
            | Severity | Count | Status |
            |----------|-------|--------|
            | üî¥ **Critical** | **${summary.critical}** | ${summary.critical > 0 ? '‚ùå Action Required' : '‚úÖ None Found'} |
            | üü† **High** | **${summary.high}** | ${summary.high > 10 ? '‚ö†Ô∏è Review Recommended' : '‚úÖ Acceptable'} |
            | üü° **Medium** | **${summary.medium}** | ${summary.medium > 0 ? 'üìù Consider Fixing' : '‚úÖ None Found'} |
            | üü¢ **Low** | **${summary.low}** | ‚ÑπÔ∏è Informational |
            | **TOTAL** | **${summary.totalVulnerabilities}** | **${summary.totalVulnerabilities} vulnerabilities detected** |
            
            ### ü§ñ **Analysis Features**
            - **Deep Scan**: ${summary.deepScanEnabled ? '‚úÖ Enabled' : '‚ùå Disabled'}
            - **AI Analysis**: ${summary.aiAnalysisEnabled ? '‚úÖ Enabled (context-aware detection)' : '‚ùå Disabled'}
            - **ML Features**: ${summary.mlFeaturesEnabled ? '‚úÖ Enabled (anomaly detection)' : '‚ùå Disabled'}
            
            ${mlInsights}
            
            ${autoFixSection}
            
            ### üìã **Next Steps**
            
            ${summary.critical > 0 ? `
            #### ‚ùå **IMMEDIATE ACTION REQUIRED**
            - Fix **${summary.critical} critical vulnerabilities** before deployment
            - Review inline comments for specific fixes
            - Re-run analysis after applying fixes
            ` : ''}
            
            ${summary.high > 0 ? `
            #### ‚ö†Ô∏è **HIGH PRIORITY ISSUES**
            - Address **${summary.high} high-severity vulnerabilities**
            - Check inline comments for remediation steps
            ` : ''}
            
            ${summary.totalVulnerabilities === 0 ? `
            #### ‚úÖ **No Security Issues Found**
            Great job! The Security Paranoia Bot found no vulnerabilities in this PR.
            ` : `
            #### üîç **Detailed Analysis**
            The bot has posted **inline comments** on vulnerable lines with:
            - Specific vulnerability descriptions
            - Security impact explanations
            - Code examples for fixes
            ${mlResults && !mlResults.error ? '- ML-enhanced recommendations' : ''}
            
            Review all inline comments in the "Files changed" tab.
            `}
            
            ---
            
            > ü§ñ **Security Paranoia Bot** - Dynamic vulnerability analysis powered by SiYuan Organization
            > 
            > üìä **Scanned**: ${Object.keys(vulnerabilities || {}).length} files | **Found**: ${summary.totalVulnerabilities} vulnerabilities
            > 
            > üîó **Report Artifacts**: Available in workflow run artifacts
            `;
            
            // Post summary comment
            const issueNumber = context.payload.pull_request?.number || 
                               parseInt('${{ inputs.pr_number }}') || 
                               context.issue.number;
            
            if (issueNumber) {
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log(`Posted summary comment to PR #${issueNumber}`);
            }
      
      - name: Post Inline Vulnerability Comments
        if: always() && (github.event_name == 'pull_request' || inputs.pr_number)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            // Read vulnerability details
            let vulnerabilities;
            try {
              vulnerabilities = JSON.parse(fs.readFileSync('vulnerability-details.json', 'utf8'));
            } catch (error) {
              console.error('Failed to read vulnerability details:', error);
              return;
            }
            
            if (!vulnerabilities || Object.keys(vulnerabilities).length === 0) {
              console.log('No vulnerabilities to comment on');
              return;
            }
            
            // Read ML results if available
            let mlResults = null;
            try {
              if (fs.existsSync('ml-analysis-results.json')) {
                mlResults = JSON.parse(fs.readFileSync('ml-analysis-results.json', 'utf8'));
              }
            } catch (error) {
              console.error('Failed to read ML results:', error);
            }
            
            const prNumber = context.payload.pull_request?.number || parseInt('${{ inputs.pr_number }}');
            if (!prNumber) {
              console.log('No PR number found');
              return;
            }
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const commitSha = pr.data.head.sha;
            
            // Get PR files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 100
            });
            
            const prFiles = new Set(files.data.map(f => f.filename));
            
            // Helper function to get ML suggestion
            function getMLSuggestion(vuln, filename) {
              if (!mlResults || !mlResults.suggestions) return null;
              
              const suggestion = mlResults.suggestions?.find(s => 
                (s.file === filename && s.line === vuln.line) ||
                s.vulnerabilityId === `${filename}-${vuln.line}`
              );
              
              return suggestion?.description || suggestion?.suggestions?.[0] || null;
            }
            
            // Prepare comments
            const comments = [];
            for (const [filename, fileVulns] of Object.entries(vulnerabilities)) {
              if (!prFiles.has(filename)) {
                console.log(`Skipping ${filename} - not in PR`);
                continue;
              }
              
              for (const vuln of fileVulns) {
                const mlSuggestion = getMLSuggestion(vuln, filename);
                
                const severityIcon = {
                  critical: 'üî¥',
                  high: 'üü†',
                  medium: 'üü°',
                  low: 'üü¢'
                }[vuln.severity] || '‚ö™';
                
                const body = `### ${severityIcon} ${vuln.severity.toUpperCase()}: ${vuln.type}
            
            **Issue**: ${vuln.message}
            
            **Fix**:
            \`\`\`javascript
            ${vuln.fix}
            \`\`\`
            
            ${mlSuggestion ? `**üß† ML Insight**: ${mlSuggestion}` : ''}
            
            ${vuln.severity === 'critical' ? '‚ö†Ô∏è **This must be fixed before deployment!**' : ''}`;
                
                comments.push({
                  path: filename,
                  line: vuln.line,
                  side: 'RIGHT',
                  body: body
                });
              }
            }
            
            console.log(`Posting ${comments.length} inline comments...`);
            
            if (comments.length === 0) {
              console.log('No comments to post');
              return;
            }
            
            // Post comments in batches to avoid rate limits
            const BATCH_SIZE = 10;
            const DELAY_MS = 2000;
            
            for (let i = 0; i < comments.length; i += BATCH_SIZE) {
              const batch = comments.slice(i, i + BATCH_SIZE);
              
              try {
                // Create review with comments
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  commit_id: commitSha,
                  event: 'COMMENT',
                  comments: batch
                });
                
                console.log(`Posted ${batch.length} comments (${i + batch.length}/${comments.length})`);
                
                // Delay between batches
                if (i + BATCH_SIZE < comments.length) {
                  await new Promise(resolve => setTimeout(resolve, DELAY_MS));
                }
              } catch (error) {
                console.error(`Failed to post batch starting at ${i}:`, error.message);
                
                // Try posting comments individually as fallback
                for (const comment of batch) {
                  try {
                    await github.rest.pulls.createReviewComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber,
                      commit_id: commitSha,
                      path: comment.path,
                      line: comment.line,
                      side: comment.side,
                      body: comment.body
                    });
                    console.log(`Posted individual comment on ${comment.path}:${comment.line}`);
                  } catch (err) {
                    console.error(`Failed to post comment on ${comment.path}:${comment.line}:`, err.message);
                  }
                }
              }
            }
            
            console.log('Finished posting vulnerability comments');
      
      - name: Set Final Exit Code
        if: always()
        run: |
          # Use the exit code from security analysis
          if [[ "${FINAL_EXIT_CODE:-0}" == "1" ]]; then
            echo "‚ùå Workflow failing due to critical vulnerabilities"
            exit 1
          else
            echo "‚úÖ Workflow passing - no critical vulnerabilities"
            exit 0
          fi