name: Security Paranoia Bot - Local Analysis

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'PR number to analyze (optional)'
        required: false
        type: string
      enable_deep_scan:
        description: 'Enable comprehensive deep scanning'
        required: false
        type: boolean
        default: true
      enable_ai_analysis:
        description: 'Enable AI-enhanced analysis'
        required: false
        type: boolean
        default: true
      enable_ml_features:
        description: 'Enable Phase 3 ML features'
        required: false
        type: boolean
        default: true
    secrets:
      GEMINI_API_KEY:
        required: false
      OPENAI_API_KEY:
        required: false
      PHASE3_API_URL:
        required: false
      PHASE3_API_KEY:
        required: false

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      issues: write
      security-events: write
    
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: 'target-repo'
      
      - name: Checkout Security Paranoia Bot
        uses: actions/checkout@v4
        with:
          repository: 'storehubai/security-paranoia-bot'
          path: 'security-bot'
          ref: 'main'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'security-bot/package-lock.json'
      
      - name: Install Security Bot Dependencies
        working-directory: security-bot
        run: |
          echo "📦 Installing dependencies..."
          npm ci
      
      - name: Build Security Bot
        working-directory: security-bot
        run: |
          echo "🔨 Building Security Paranoia Bot..."
          npm run build || echo "No build script found, continuing..."
      
      - name: Run Local Security Analysis
        id: security_scan
        continue-on-error: true
        working-directory: security-bot
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENABLE_AI_ANALYSIS: ${{ inputs.enable_ai_analysis }}
          ENABLE_DEEP_SCAN: ${{ inputs.enable_deep_scan }}
          ENABLE_ML_FEATURES: ${{ inputs.enable_ml_features }}
          PHASE3_API_URL: ${{ secrets.PHASE3_API_URL }}
          PHASE3_API_KEY: ${{ secrets.PHASE3_API_KEY }}
          PR_NUMBER: ${{ inputs.pr_number || github.event.pull_request.number }}
          TARGET_REPO_PATH: ${{ github.workspace }}/target-repo
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "🔍 Starting Local Security Analysis..."
          echo "Repository: ${{ github.repository }}"
          echo "PR Number: ${PR_NUMBER}"
          echo "Target Path: ${TARGET_REPO_PATH}"
          
          # Create output directory
          mkdir -p analysis-output
          
          # Run the analysis directly
          if [[ -f "src/cli.ts" ]]; then
            echo "Running TypeScript CLI..."
            npx ts-node src/cli.ts analyze-pr \
              --owner "${REPO_OWNER}" \
              --repo "${REPO_NAME}" \
              --pr-number "${PR_NUMBER}" \
              --local-path "${TARGET_REPO_PATH}" \
              --output "analysis-output/results.json" \
              ${ENABLE_AI_ANALYSIS:+--enable-ai} \
              ${ENABLE_DEEP_SCAN:+--enable-deep-scan} \
              ${ENABLE_ML_FEATURES:+--enable-ml}
          else
            echo "TypeScript CLI not found, trying JavaScript..."
            
            # Alternative: Run the bot directly with node
            cat > run-analysis.js << 'EOF'
          const { PullRequestAnalyzer } = require('./src/integrations/github/PullRequestAnalyzer');
          const { AttackEngine } = require('./src/attack-engine/AttackEngine');
          const { MongoDBFuzzer } = require('./src/mongodb-fuzzer/MongoDBFuzzer');
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');
          const path = require('path');
          
          async function runLocalAnalysis() {
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const attackEngine = new AttackEngine();
            const mongoFuzzer = new MongoDBFuzzer();
            const analyzer = new PullRequestAnalyzer(octokit, attackEngine, mongoFuzzer);
            
            // Get PR files
            const prNumber = parseInt(process.env.PR_NUMBER);
            const owner = process.env.REPO_OWNER;
            const repo = process.env.REPO_NAME;
            
            console.log(`Analyzing PR #${prNumber} in ${owner}/${repo}`);
            
            try {
              // Get PR files from GitHub
              const { data: files } = await octokit.pulls.listFiles({
                owner,
                repo,
                pull_number: prNumber,
                per_page: 100
              });
              
              console.log(`Found ${files.length} files in PR`);
              
              // Analyze each file
              const vulnerabilitiesByFile = {};
              let totalVulnerabilities = 0;
              let criticalCount = 0;
              let highCount = 0;
              let mediumCount = 0;
              let lowCount = 0;
              
              for (const file of files) {
                if (file.status === 'removed') continue;
                
                const filePath = path.join(process.env.TARGET_REPO_PATH, file.filename);
                
                if (fs.existsSync(filePath)) {
                  const content = fs.readFileSync(filePath, 'utf8');
                  console.log(`Analyzing ${file.filename}...`);
                  
                  const results = await attackEngine.analyzeCode(content, file.filename);
                  
                  if (results && results.length > 0) {
                    vulnerabilitiesByFile[file.filename] = results.map(r => ({
                      line: r.location?.line || 1,
                      type: r.type || r.vulnerability,
                      severity: r.severity || 'medium',
                      message: r.description || r.message,
                      fix: r.recommendation || r.fix || 'Review and fix this vulnerability'
                    }));
                    
                    totalVulnerabilities += results.length;
                    results.forEach(r => {
                      const severity = r.severity || 'medium';
                      if (severity === 'critical') criticalCount++;
                      else if (severity === 'high') highCount++;
                      else if (severity === 'medium') mediumCount++;
                      else lowCount++;
                    });
                  }
                }
              }
              
              // Save results
              const results = {
                vulnerabilitiesByFile,
                totalVulnerabilities,
                criticalCount,
                highCount,
                mediumCount,
                lowCount,
                analysisTime: Date.now()
              };
              
              fs.writeFileSync('analysis-output/results.json', JSON.stringify(results, null, 2));
              console.log(`Analysis complete: ${totalVulnerabilities} vulnerabilities found`);
              
            } catch (error) {
              console.error('Analysis failed:', error);
              process.exit(1);
            }
          }
          
          runLocalAnalysis();
          EOF
            
            node run-analysis.js
          fi
          
          # Check if analysis was successful
          if [[ -f "analysis-output/results.json" ]]; then
            echo "✅ Analysis completed successfully"
            
            # Parse results
            RESULTS=$(cat analysis-output/results.json)
            
            # Extract counts
            TOTAL_VULNERABILITIES=$(echo "$RESULTS" | jq '.totalVulnerabilities // 0')
            CRITICAL_COUNT=$(echo "$RESULTS" | jq '.criticalCount // 0')
            HIGH_COUNT=$(echo "$RESULTS" | jq '.highCount // 0')
            MEDIUM_COUNT=$(echo "$RESULTS" | jq '.mediumCount // 0')
            LOW_COUNT=$(echo "$RESULTS" | jq '.lowCount // 0')
            
            echo ""
            echo "📊 VULNERABILITY SUMMARY"
            echo "======================="
            echo "Total: $TOTAL_VULNERABILITIES"
            echo "🔴 Critical: $CRITICAL_COUNT"
            echo "🟠 High: $HIGH_COUNT"
            echo "🟡 Medium: $MEDIUM_COUNT"
            echo "🟢 Low: $LOW_COUNT"
            
            # Copy results to workspace
            cp analysis-output/results.json ${{ github.workspace }}/vulnerability-details.json
            echo "$RESULTS" | jq '.vulnerabilitiesByFile' > ${{ github.workspace }}/vulnerabilities-by-file.json
            
            # Generate report
            cat > ${{ github.workspace }}/security-report.json << EOF
          {
            "summary": {
              "totalVulnerabilities": ${TOTAL_VULNERABILITIES},
              "critical": ${CRITICAL_COUNT},
              "high": ${HIGH_COUNT},
              "medium": ${MEDIUM_COUNT},
              "low": ${LOW_COUNT},
              "analysisTime": "$(date -Iseconds)",
              "aiAnalysisEnabled": ${ENABLE_AI_ANALYSIS},
              "mlFeaturesEnabled": ${ENABLE_ML_FEATURES},
              "deepScanEnabled": ${ENABLE_DEEP_SCAN}
            }
          }
          EOF
            
            # Set build status
            if [[ $CRITICAL_COUNT -gt 0 ]]; then
              echo "❌ BUILD FAILED: $CRITICAL_COUNT critical vulnerabilities detected"
              echo "build_status=failure" >> $GITHUB_OUTPUT
              echo "FINAL_EXIT_CODE=1" >> $GITHUB_ENV
            else
              echo "✅ BUILD PASSED: No critical vulnerabilities"
              echo "build_status=success" >> $GITHUB_OUTPUT
              echo "FINAL_EXIT_CODE=0" >> $GITHUB_ENV
            fi
          else
            echo "❌ Analysis failed - no results file found"
            echo '{"vulnerabilitiesByFile": {}}' > ${{ github.workspace }}/vulnerability-details.json
            echo '{"summary": {"totalVulnerabilities": 0}}' > ${{ github.workspace }}/security-report.json
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "FINAL_EXIT_CODE=0" >> $GITHUB_ENV
          fi
      
      - name: Phase 3 ML Analysis
        if: always() && inputs.enable_ml_features && (github.event_name == 'pull_request' || inputs.pr_number)
        continue-on-error: true
        env:
          PHASE3_API_URL: ${{ secrets.PHASE3_API_URL }}
          PHASE3_API_KEY: ${{ secrets.PHASE3_API_KEY }}
        run: |
          echo "🤖 Running Phase 3 ML Analysis..."
          
          if [[ -z "$PHASE3_API_URL" ]] || [[ -z "$PHASE3_API_KEY" ]]; then
            echo "⚠️ Phase 3 API not configured. Skipping ML analysis."
            echo '{"error": "Phase 3 API not configured"}' > ml-analysis-results.json
            exit 0
          fi
          
          if [[ ! -f vulnerability-details.json ]] || [[ "$(cat vulnerability-details.json)" == "{}" ]]; then
            echo "⚠️ No vulnerabilities to analyze"
            echo '{"error": "No vulnerabilities found"}' > ml-analysis-results.json
            exit 0
          fi
          
          VULNS_JSON=$(cat vulnerability-details.json | jq -c '.')
          
          ML_RESPONSE=$(curl -s -X POST "${PHASE3_API_URL}/api/analyze-pr" \
            -H "X-API-Key: ${PHASE3_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"vulnerabilities\": ${VULNS_JSON},
              \"repository\": \"${{ github.repository }}\",
              \"prNumber\": ${PR_NUMBER:-0}
            }" || echo '{"error": "ML API call failed"}')
          
          echo "$ML_RESPONSE" > ml-analysis-results.json
          
          if echo "$ML_RESPONSE" | jq -e '.suggestions' > /dev/null 2>&1; then
            echo "✅ ML Analysis completed successfully"
            
            ANOMALY_COUNT=$(echo "$ML_RESPONSE" | jq '.anomalies | length' || echo "0")
            HISTORICAL_MATCHES=$(echo "$ML_RESPONSE" | jq '.historicalContext | length' || echo "0")
            
            echo "📊 ML Insights:"
            echo "- Anomalies detected: $ANOMALY_COUNT"
            echo "- Historical similar incidents: $HISTORICAL_MATCHES"
          else
            echo "⚠️ ML Analysis returned no results or failed"
          fi
      
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: |
            security-report.json
            vulnerability-details.json
            vulnerabilities-by-file.json
            ml-analysis-results.json
          retention-days: 30
      
      - name: Post Summary Comment
        if: always() && (github.event_name == 'pull_request' || inputs.pr_number)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            let report, vulnerabilities, mlResults;
            try {
              report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
              vulnerabilities = JSON.parse(fs.readFileSync('vulnerabilities-by-file.json', 'utf8'));
              if (fs.existsSync('ml-analysis-results.json')) {
                mlResults = JSON.parse(fs.readFileSync('ml-analysis-results.json', 'utf8'));
              }
            } catch (error) {
              console.error('Failed to read reports:', error);
              return;
            }
            
            const { summary } = report;
            
            let statusEmoji = '✅';
            let statusText = 'PASSED';
            if (summary.critical > 0) {
              statusEmoji = '❌';
              statusText = 'FAILED';
            } else if (summary.high > 10) {
              statusEmoji = '⚠️';
              statusText = 'WARNING';
            }
            
            let mlInsights = '';
            if (mlResults && !mlResults.error && summary.mlFeaturesEnabled) {
              const anomalyCount = mlResults.anomalies?.length || 0;
              const historicalCount = mlResults.historicalContext?.length || 0;
              const riskLevel = mlResults.riskAssessment?.level || 'Unknown';
              
              mlInsights = `
            ### 🧠 **Phase 3 ML Analysis**
            
            ${anomalyCount > 0 ? `
            ⚠️ **Anomaly Alert**: ${anomalyCount} unusual security patterns detected that may indicate:
            - Zero-day vulnerabilities
            - Novel attack vectors  
            - Business logic flaws
            ` : '✅ No anomalous patterns detected'}
            
            ${historicalCount > 0 ? `
            📚 **Historical Context**: Found ${historicalCount} similar incidents in organizational history
            ` : ''}
            
            ${riskLevel !== 'Unknown' ? `📊 **Risk Assessment**: ${riskLevel}` : ''}`;
            }
            
            const comment = `## ${statusEmoji} **Security Paranoia Bot Analysis Report**
            
            **Status**: ${statusText} | **Analysis Time**: ${new Date().toISOString()}
            
            ### 📊 **Vulnerability Summary**
            
            | Severity | Count | Status |
            |----------|-------|--------|
            | 🔴 **Critical** | **${summary.critical}** | ${summary.critical > 0 ? '❌ Action Required' : '✅ None Found'} |
            | 🟠 **High** | **${summary.high}** | ${summary.high > 10 ? '⚠️ Review Recommended' : '✅ Acceptable'} |
            | 🟡 **Medium** | **${summary.medium}** | ${summary.medium > 0 ? '📝 Consider Fixing' : '✅ None Found'} |
            | 🟢 **Low** | **${summary.low}** | ℹ️ Informational |
            | **TOTAL** | **${summary.totalVulnerabilities}** | **${summary.totalVulnerabilities} vulnerabilities detected** |
            
            ### 🤖 **Analysis Features**
            - **Deep Scan**: ${summary.deepScanEnabled ? '✅ Enabled' : '❌ Disabled'}
            - **AI Analysis**: ${summary.aiAnalysisEnabled ? '✅ Enabled (context-aware detection)' : '❌ Disabled'}
            - **ML Features**: ${summary.mlFeaturesEnabled ? '✅ Enabled (anomaly detection)' : '❌ Disabled'}
            
            ${mlInsights}
            
            ### 📋 **Next Steps**
            
            ${summary.critical > 0 ? `
            #### ❌ **IMMEDIATE ACTION REQUIRED**
            - Fix **${summary.critical} critical vulnerabilities** before deployment
            - Review inline comments for specific fixes
            - Re-run analysis after applying fixes
            ` : ''}
            
            ${summary.high > 0 ? `
            #### ⚠️ **HIGH PRIORITY ISSUES**
            - Address **${summary.high} high-severity vulnerabilities**
            - Check inline comments for remediation steps
            ` : ''}
            
            ${summary.totalVulnerabilities === 0 ? `
            #### ✅ **No Security Issues Found**
            Great job! The Security Paranoia Bot found no vulnerabilities in this PR.
            ` : `
            #### 🔍 **Detailed Analysis**
            The bot has posted **inline comments** on vulnerable lines with:
            - Specific vulnerability descriptions
            - Security impact explanations
            - Code examples for fixes
            ${mlResults && !mlResults.error ? '- ML-enhanced recommendations' : ''}
            
            Review all inline comments in the "Files changed" tab.
            `}
            
            ---
            
            > 🤖 **Security Paranoia Bot** - Local vulnerability analysis powered by SiYuan Organization
            > 
            > 📊 **Scanned**: ${Object.keys(vulnerabilities || {}).length} files | **Found**: ${summary.totalVulnerabilities} vulnerabilities
            > 
            > 🔗 **Report Artifacts**: Available in workflow run artifacts
            `;
            
            const issueNumber = context.payload.pull_request?.number || 
                               parseInt('${{ inputs.pr_number }}') || 
                               context.issue.number;
            
            if (issueNumber) {
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log(`Posted summary comment to PR #${issueNumber}`);
            }
      
      - name: Post Inline Vulnerability Comments
        if: always() && (github.event_name == 'pull_request' || inputs.pr_number)
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            
            let vulnerabilities;
            try {
              vulnerabilities = JSON.parse(fs.readFileSync('vulnerabilities-by-file.json', 'utf8'));
            } catch (error) {
              console.error('Failed to read vulnerability details:', error);
              return;
            }
            
            if (!vulnerabilities || Object.keys(vulnerabilities).length === 0) {
              console.log('No vulnerabilities to comment on');
              return;
            }
            
            let mlResults = null;
            try {
              if (fs.existsSync('ml-analysis-results.json')) {
                mlResults = JSON.parse(fs.readFileSync('ml-analysis-results.json', 'utf8'));
              }
            } catch (error) {
              console.error('Failed to read ML results:', error);
            }
            
            const prNumber = context.payload.pull_request?.number || parseInt('${{ inputs.pr_number }}');
            if (!prNumber) {
              console.log('No PR number found');
              return;
            }
            
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const commitSha = pr.data.head.sha;
            
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 100
            });
            
            const prFiles = new Set(files.data.map(f => f.filename));
            
            function getMLSuggestion(vuln, filename) {
              if (!mlResults || !mlResults.suggestions) return null;
              
              const suggestion = mlResults.suggestions?.find(s => 
                (s.file === filename && s.line === vuln.line) ||
                s.vulnerabilityId === `${filename}-${vuln.line}`
              );
              
              return suggestion?.description || suggestion?.suggestions?.[0] || null;
            }
            
            const comments = [];
            for (const [filename, fileVulns] of Object.entries(vulnerabilities)) {
              if (!prFiles.has(filename)) {
                console.log(`Skipping ${filename} - not in PR`);
                continue;
              }
              
              for (const vuln of fileVulns) {
                const mlSuggestion = getMLSuggestion(vuln, filename);
                
                const severityIcon = {
                  critical: '🔴',
                  high: '🟠',
                  medium: '🟡',
                  low: '🟢'
                }[vuln.severity] || '⚪';
                
                const body = `### ${severityIcon} ${vuln.severity.toUpperCase()}: ${vuln.type}
            
            **Issue**: ${vuln.message}
            
            **Fix**:
            \`\`\`javascript
            ${vuln.fix}
            \`\`\`
            
            ${mlSuggestion ? `**🧠 ML Insight**: ${mlSuggestion}` : ''}
            
            ${vuln.severity === 'critical' ? '⚠️ **This must be fixed before deployment!**' : ''}`;
                
                comments.push({
                  path: filename,
                  line: vuln.line || 1,
                  side: 'RIGHT',
                  body: body
                });
              }
            }
            
            console.log(`Posting ${comments.length} inline comments...`);
            
            if (comments.length === 0) {
              console.log('No comments to post');
              return;
            }
            
            const BATCH_SIZE = 10;
            const DELAY_MS = 2000;
            
            for (let i = 0; i < comments.length; i += BATCH_SIZE) {
              const batch = comments.slice(i, i + BATCH_SIZE);
              
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  commit_id: commitSha,
                  event: 'COMMENT',
                  comments: batch
                });
                
                console.log(`Posted ${batch.length} comments (${i + batch.length}/${comments.length})`);
                
                if (i + BATCH_SIZE < comments.length) {
                  await new Promise(resolve => setTimeout(resolve, DELAY_MS));
                }
              } catch (error) {
                console.error(`Failed to post batch starting at ${i}:`, error.message);
                
                for (const comment of batch) {
                  try {
                    await github.rest.pulls.createReviewComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber,
                      commit_id: commitSha,
                      path: comment.path,
                      line: comment.line,
                      side: comment.side,
                      body: comment.body
                    });
                    console.log(`Posted individual comment on ${comment.path}:${comment.line}`);
                  } catch (err) {
                    console.error(`Failed to post comment on ${comment.path}:${comment.line}:`, err.message);
                  }
                }
              }
            }
            
            console.log('Finished posting vulnerability comments');
      
      - name: Set Final Exit Code
        if: always()
        run: |
          if [[ "${FINAL_EXIT_CODE:-0}" == "1" ]]; then
            echo "❌ Workflow failing due to critical vulnerabilities"
            exit 1
          else
            echo "✅ Workflow passing - no critical vulnerabilities"
            exit 0
          fi